<?xml version="1.0" encoding="UTF-8"?>

<!--
	JNativeHook: Global keyboard and mouse hooking for Java.
	Copyright (C) 2006-2013 Alexander Barker.  All Rights Received.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<project name="JNativeHook" default="all" basedir=".">
	<property environment="env" />

	<!-- Project Settings -->
	<property file="build.num" />
	<property name="project.name"		value="${ant.project.name}" />
	<property name="project.vendor" 	value="Alexander Barker (alex@1stleg.com)" />
	<property name="project.version"	value="${build.major}.${build.minor}.${build.revision}" />

	<!-- Path Settings -->
	<property name="dir.src"			value="${basedir}${file.separator}src" />
	<property name="dir.src.java"		value="${dir.src}${file.separator}java" />
	<property name="dir.src.native"		value="${dir.src}${file.separator}native" />
	<property name="dir.doc"			value="${basedir}${file.separator}doc" />
	<property name="dir.jar"			value="${basedir}${file.separator}jar" />
	<property name="dir.dist"			value="${basedir}${file.separator}dist" />
	<property name="dir.lib"			value="${basedir}${file.separator}lib" />
	<property name="dir.bin"			value="${basedir}${file.separator}bin" />
	<property name="dir.bin.class"		value="${dir.bin}${file.separator}class" />
	<property name="dir.bin.obj"		value="${dir.bin}${file.separator}obj" />


	<target name="clean" description="Removes generated bytecode and object files.">
		<echo>Cleaning build structure...</echo>

		<delete includeEmptyDirs="true" verbose="true" failonerror="false">
			<fileset dir="${dir.bin}" includes="**/*" />
			<fileset file="build.properties" />
		</delete>
	</target>


	<target name="deep-clean" depends="clean" description="Removes all items generated by the build system.">
		<echo>Cleaning all build related items...</echo>

		<delete includeEmptyDirs="true" verbose="true" failonerror="false">
			<fileset dir="${dir.bin}" />
			<fileset dir="${dir.dist}" />
			<fileset dir="${dir.doc}" />
			<fileset dir="${dir.jar}" />
			<fileset dir="${dir.lib}" />

			<fileset file="${dir.src.native}/jni/org_jnativehook_GlobalScreen.h" />
		</delete>
	</target>


	<target name="configure" unless="project.isConfigured" description="Automatically generates a properties file for your environment.">
		<property file="build.properties" />

		<echo>Checking environment sanity...</echo>

		<fail message="Could not determine ${project.name} version.  Please check the build.num file.">
			<condition>
				<not>
					<and>
						<isset property="build.major" />
						<isset property="build.minor" />
						<isset property="build.revision" />
					</and>
				</not>
			</condition>
		</fail>
		<echo level="info">${project.name} version ${project.version}</echo>



		<!-- Set the project flags to their default values -->
		<property name="project.debug" value="false" />
		<echo level="info">Build debug: ${project.debug}</echo>

		<condition property="project.optimize" value="true" else="false">
			<not>
				<istrue value="${project.debug}" />
			</not>
		</condition>
		<echo level="info">Build optimized: ${project.optimize}</echo>

		<condition property="project.strip" value="true" else="false">
			<not>
				<istrue value="${project.debug}" />
			</not>
		</condition>
		<echo level="info">Build stripped: ${project.strip}</echo>



		<!-- Determin the operating system -->
		<condition property="native.os" value="freebsd">
			<os family="unix" name="FreeBSD" />
		</condition>
		<condition property="native.os" value="openbsd">
			<os family="unix" name="OpenBSD" />
		</condition>
		<condition property="native.os" value="osx">
			<and>
				<os family="mac" />
				<os family="unix" />
			</and>
		</condition>
		<condition property="native.os" value="solaris">
			<or>
				<os family="unix" name="Solaris" />
				<os family="unix" name="SunOS" />
			</or>
		</condition>
		<condition property="native.os" value="linux">
			<os family="unix" name="Linux" />
		</condition>
		<condition property="native.os" value="windows">
			<os family="winnt" />
		</condition>

		<!-- Figure out the source family we are building -->
		<condition property="native.os.isApple" value="true">
			<equals arg1="${native.os}" arg2="osx" casesensitive="false" trim="true" />
		</condition>
		<!-- TODO Testing Needed.
		<condition property="native.os.isSolaris" value="true">
			<or>
				<equals arg1="${native.os}" arg2="solaris" casesensitive="false" trim="true" />
			</or>
		</condition>
		-->
		<condition property="native.os.isUnix" value="true">
			<or>
				<equals arg1="${native.os}" arg2="freebsd" casesensitive="false" trim="true" />
				<equals arg1="${native.os}" arg2="openbsd" casesensitive="false" trim="true" />
				<equals arg1="${native.os}" arg2="solaris" casesensitive="false" trim="true" />
				<equals arg1="${native.os}" arg2="linux" casesensitive="false" trim="true" />
			</or>
		</condition>
		<condition property="native.os.isWindows" value="true">
			<equals arg1="${native.os}" arg2="windows" casesensitive="false" trim="true" />
		</condition>

		<!-- set system specific src/lib directory -->
		<condition property="dir.src.platform" value="osx">
			<istrue value="${native.os.isApple}" />
		</condition>
		<condition property="dir.src.platform" value="unix">
			<istrue value="${native.os.isUnix}" />
		</condition>
		<condition property="dir.src.platform" value="windows">
			<istrue value="${native.os.isWindows}" />
		</condition>

		<fail message="The ${os.name} ${os.version} operating system is not currently supported.">
			<condition>
				<not>
					<or>
						<istrue value="${native.os.isApple}" />
						<istrue value="${native.os.isUnix}" />
						<istrue value="${native.os.isWindows}" />
					</or>
				</not>
			</condition>
		</fail>
		<echo level="info">Operating system: ${os.name} ${os.version} (${dir.src.platform} compatible)</echo>


		<!-- Try to locate the include folder for java headers -->
		<condition property="java.include" value="${java.home}${file.separator}include">
			<available file="${java.home}${file.separator}include" type="dir" />
		</condition>
		<condition property="java.include" value="${env.JAVA_HOME}${file.separator}include">
			<available file="${env.JAVA_HOME}${file.separator}include" type="dir" />
		</condition>
		<condition property="java.include" value="${java.home}${file.separator}..${file.separator}include">
			<available file="${java.home}${file.separator}..${file.separator}include" type="dir" />
		</condition>
		<condition property="java.include" value="${java.home}${file.separator}..${file.separator}Headers">
			<available file="${java.home}${file.separator}..${file.separator}Headers" type="dir" />
		</condition>
		<condition property="java.include" value="/System/Library/Frameworks/JavaVM.framework/Headers">
			<available file="/System/Library/Frameworks/JavaVM.framework/Headers" type="dir" />
		</condition>
		<condition property="java.include" value="${java.home}${file.separator}Headers">
			<available file="${java.home}${file.separator}Headers" type="dir" />
		</condition>

		<fail message="Could not determine java.include location.  Please set your JAVA_HOME environment variable or manually set java.include to the location of your java header files in the build.properties file.">
			<condition>
				<not>
					<or>
						<isset property="java.include" />
						<available file="${java.include}" type="dir" />
					</or>
				</not>
			</condition>
		</fail>
		<echo level="info">Found Java include location: ${java.include}</echo>


		<!-- Try to locate the rt.jar location for java.bootclasspath -->
		<condition property="java.bootclasspath" value="${java.home}${file.separator}lib${file.separator}rt.jar">
			<available file="${java.home}${file.separator}lib${file.separator}rt.jar" type="file" />
		</condition>
		<condition property="java.bootclasspath" value="${java.home}${file.separator}bundle${file.separator}Classes${file.separator}classes.jar">
			<available file="${java.home}${file.separator}bundle${file.separator}Classes${file.separator}classes.jar" type="file" />
		</condition>

		<fail message="Could not determine java.bootclasspath location.  Please set your JAVA_HOME environment variable or manually set java.bootclasspath to the location of your rt.jar file in the build.properties file.">
			<condition>
				<not>
					<or>
						<isset property="java.bootclasspath" />
						<available file="${java.bootclasspath}" type="file" />
					</or>
				</not>
			</condition>
		</fail>
		<echo level="info">Found Java lib location: ${java.bootclasspath}</echo>


		<!-- Try to locate the env path varaible -->
		<condition property="native.path" value="${env.PATH}">
			<isset property="env.PATH" />
		</condition>
		<condition property="native.path" value="${env.Path}">
			<isset property="env.Path" />
		</condition>
		<condition property="native.path" value="${env.path}">
			<isset property="env.path" />
		</condition>

		<fail message="Could not determine environment path.  Please set your PATH environment variable or manually set native.path to a '${path.separator}' seperated list of folders to search for native applications.">
			<condition>
				<not>
					<isset property="native.path" />
				</not>
			</condition>
		</fail>
		<echo level="info">Found environment path: ${native.path}</echo>


		<!-- Set the system arch name used for orginizing native libraries -->
		<condition property="native.arch" value="x86">
			<or>
				<os arch="x86" />
				<os arch="i386" />
				<os arch="i486" />
				<os arch="i586" />
				<os arch="i686" />
			</or>
		</condition>
		<condition property="native.arch" value="x86_64">
			<or>
				<os arch="x86-64" />
				<os arch="x86_64" />
				<os arch="amd64" />
				<os arch="k8" />
			</or>
		</condition>
		<condition property="native.arch" value="ppc">
			<or>
				<os arch="ppc" />
				<os arch="PowerPC" />
			</or>
		</condition>
		<condition property="native.arch" value="ppc64">
			<or>
				<os arch="ppc64" />
				<os arch="PowerPC64" />
			</or>
		</condition>
		<property name="native.arch" value="${os.arch}" />
		<!-- TODO Testing Needed
		<condition property="native.arch" value="sparc">
			<os arch="sparc" />
		</condition>
		-->

		<!-- Figure out of the system arch to pass to the compiler -->
		<condition property="native.arch.target" value="i586">
			<and>
				<equals arg1="${native.arch}" arg2="x86" casesensitive="false" trim="true" />

				<not>
					<istrue value="${native.os.isApple}" />
				</not>
			</and>
		</condition>
		<condition property="native.arch.target" value="i386">
			<and>
				<equals arg1="${native.arch}" arg2="x86" casesensitive="false" trim="true" />

				<istrue value="${native.os.isApple}" />
			</and>
		</condition>
		<condition property="native.arch.target" value="k8">
			<and>
				<equals arg1="${native.arch}" arg2="x86_64" casesensitive="false" trim="true" />

				<not>
					<istrue value="${native.os.isApple}" />
				</not>
			</and>
		</condition>
		<condition property="native.arch.target" value="x86_64">
			<and>
				<equals arg1="${native.arch}" arg2="x86_64" casesensitive="false" trim="true" />

				<istrue value="${native.os.isApple}" />
			</and>
		</condition>
		<condition property="native.arch.target" value="${native.arch}">
			<or>
				<equals arg1="${native.arch}" arg2="ppc" casesensitive="false" trim="true" />
				<equals arg1="${native.arch}" arg2="ppc64" casesensitive="false" trim="true" />
			</or>
		</condition>
		<!-- TODO Testing Needed
		<condition property="native.arch.target" value="cypress">
			<equals arg1="${native.arch}" arg2="sparc" casesensitive="false" trim="true" />
		</condition>
		<condition property="native.arch.target" value="ultrasparc">
			<equals arg1="${native.arch}" arg2="sparcv9" casesensitive="false" trim="true" />
		</condition>
		-->


		<!-- Set the arch tune value -->
		<condition property="native.arch.tune" value="i586">
			<equals arg1="${native.arch.target}" arg2="i386" casesensitive="false" trim="true" />
		</condition>
		<condition property="native.arch.tune" value="powerpc">
			<equals arg1="${native.arch.target}" arg2="ppc" casesensitive="false" trim="true" />
		</condition>
		<condition property="native.arch.tune" value="powerpc64">
			<equals arg1="${native.arch.target}" arg2="ppc64" casesensitive="false" trim="true" />
		</condition>
		<property name="native.arch.tune" value="generic" />

		<fail message="The ${native.arch} architecture is not currently supported.">
			<condition>
				<not>
					<isset property="native.arch.target" />
				</not>
			</condition>
		</fail>
		<echo level="info">Compatible system architecture: ${native.arch}</echo>


		<!-- Set 32 or 64 bit flag -->
		<property name="native.arch.model" value="${sun.arch.data.model}" />
		<fail message="Could not determin the native architecture data model.">
			<condition>
				<not>
					<isset property="native.arch.model" />
				</not>
			</condition>
		</fail>
		<echo level="info">System architecture data model: ${native.arch.model} bit</echo>



		<!-- Set the project config options to their default values -->
		<property name="project.option.carbon_legacy" value="false" />
		<property name="project.option.corefoundation" value="true" />
		<property name="project.option.iokit" value="true" />

		<property name="project.option.xf86misc" value="false" />
		<property name="project.option.xkb" value="true" />
		<property name="project.option.xt" value="true" />
		<property name="project.option.xrecord_async" value="false" />


		<!-- Set Apple configuration options to their default values -->
		<condition property="native.cc.macros.carbon_legacy" value="-DCARBON_LEGACY" else="">
			<and>
				<istrue value="${native.os.isApple}" />
				<istrue value="${project.option.carbon_legacy}" />
			</and>
		</condition>
		<condition property="native.cc.macros.corefoundation" value="-DCOREFOUNDATION" else="">
			<and>
				<istrue value="${native.os.isApple}" />
				<istrue value="${project.option.corefoundation}" />
			</and>
		</condition>
		<condition property="native.cc.macros.iokit" value="-DIOKIT" else="">
			<and>
				<istrue value="${native.os.isApple}" />
				<istrue value="${project.option.iokit}" />
			</and>
		</condition>

		<!-- Set Linux configuration options to their default values -->
		<condition property="native.cc.macros.xf86misc" value="-DXF86MISC" else="">
			<and>
				<istrue value="${native.os.isUnix}" />
				<istrue value="${project.option.xf86misc}" />
			</and>
		</condition>
		<condition property="native.cc.macros.xkb" value="-DXKB" else="">
			<and>
				<istrue value="${native.os.isUnix}" />
				<istrue value="${project.option.xkb}" />
			</and>
		</condition>
		<condition property="native.cc.macros.xt" value="-DXT" else="">
			<and>
				<istrue value="${native.os.isUnix}" />
				<istrue value="${project.option.xt}" />
			</and>
		</condition>
		<condition property="native.cc.macros.xrecord_async" value="-DXRECORD_ASYNC" else="">
			<and>
				<istrue value="${native.os.isUnix}" />
				<istrue value="${project.option.xrecord_async}" />
			</and>
		</condition>

		<!-- Set Windows configuration options to their default values -->
		<!-- TODO: At this time Windows does not have any platform specific configuration options -->

		<!-- Set Common configuration options to their default values -->
		<condition property="native.cc.macros.debug" value="-DDEBUG" else="">
			<istrue value="${project.debug}" />
		</condition>


		<!-- Try to locate a compiler -->
		<condition property="native.cc" value="${env.CC}">
			<available filepath="${native.path}" file="${env.CC}" type="file" />
		</condition>
		<condition property="native.cc" value="gcc">
			<available filepath="${native.path}" file="gcc" type="file" />
		</condition>
		<condition property="native.cc" value="clang">
			<available filepath="${native.path}" file="clang" type="file" />
		</condition>
		<condition property="native.cc" value="gcc.exe">
			<available filepath="${native.path}" file="gcc.exe" type="file" />
		</condition>
		<condition property="native.cc" value="mingw32-gcc.exe">
			<available filepath="${native.path}" file="mingw32-gcc.exe" />
		</condition>
		<condition property="native.cc" value="mingw64-gcc.exe">
			<available filepath="${native.path}" file="mingw64-gcc.exe" />
		</condition>
		<condition property="native.cc" value="clang.exe">
			<available filepath="${native.path}" file="clang.exe" type="file" />
		</condition>

		<fail message="Could not locate a suitable compiler.  Please make sure your compiler is in your PATH or manually specify your native.cc value.">
			<condition>
				<not>
					<and>
						<isset property="native.cc" />
						<or>
							<available filepath="${native.path}" file="${native.cc}" />
							<available file="${native.cc}" />
						</or>
					</and>
				</not>
			</condition>
		</fail>
		<echo level="info">Native compiler: ${native.cc}</echo>


		<!-- Try to locate the linker -->
		<condition property="native.ld" value="${env.LD}">
			<available filepath="${native.path}" file="${env.LD}" type="file" />
		</condition>
		<property name="native.ld" value="${native.cc}" />
		<!-- Using gcc for linking does a much better job at passing all the correct libraries to the linker -->

		<fail message="Could not locate a suitable linker.  Please make sure your linker is in your PATH or manually specify your native.ld value.">
			<condition>
				<not>
					<and>
						<isset property="native.ld" />
						<or>
							<available filepath="${native.path}" file="${native.ld}" />
							<available file="${native.ld}" />
						</or>
					</and>
				</not>
			</condition>
		</fail>
		<echo level="info">Native linker: ${native.ld}</echo>


		<!-- Set the java compiler -->
		<property name="java.cc" value="modern" />
		<echo level="info">Java compiler: ${java.cc}</echo>

		<!-- Set the java compatible version ${ant.java.version} -->
		<property name="java.target" value="1.5" />
		<echo level="info">Java compatibility: ${java.target}</echo>


		<!-- Set compiler optimization flags -->
		<condition property="native.cc.flags.optimize" value="-O2 -fomit-frame-pointer -pipe" else="-O0">
			<istrue value="${project.optimize}" />
		</condition>

		<!-- Set compiler standards flags -->
		<condition property="native.cc.flags.standard" value="-Werror -std=c99 -pedantic" else="-std=c99">
			<not>
				<istrue value="${project.debug}" />
			</not>
		</condition>

		<!-- Set compiler debug flags -->
		<condition property="native.cc.flags.debug" value="-ggdb" else="">
			<istrue value="${project.debug}" />
		</condition>

		<!-- Set the compiler flags. -->
		<condition property="native.cc.flags" value="${env.CFLAGS}">
			<isset property="${env.CFLAGS}" />
		</condition>
		<condition property="native.cc.flags" value="-arch ${native.arch.target} -mtune=${native.arch.tune} ${native.cc.flags.optimize} ${native.cc.flags.debug}">
			<!-- -isysroot=/Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4 -->
			<istrue value="${native.os.isApple}" />
		</condition>
		<condition property="native.cc.flags" value="-march=${native.arch.target} -mtune=${native.arch.tune} ${native.cc.flags.optimize} ${native.cc.flags.debug}">
			<istrue value="${native.os.isUnix}" />
		</condition>
		<condition property="native.cc.flags" value="-march=${native.arch.target} -mtune=${native.arch.tune} ${native.cc.flags.optimize} ${native.cc.flags.debug}">
			<istrue value="${native.os.isWindows}" />
		</condition>

		<!-- Set system specific includes locations -->
		<condition property="native.cc.includes" value="-I${dir.src.native}${file.separator}common -I${dir.src.native}${file.separator}jni -I${file.separator}usr${file.separator}lib -I${java.include} -I${java.include}${file.separator}darwin">
			<!-- -F/System/Library/Frameworks/ApplicationServices.framework/Frameworks -->
			<istrue value="${native.os.isApple}" />
		</condition>
		<condition property="native.cc.includes" value="-I${dir.src.native}${file.separator}common -I${dir.src.native}${file.separator}jni -I${java.include} -I${java.include}${file.separator}linux -I${file.separator}usr${file.separator}include -I${file.separator}usr${file.separator}local${file.separator}include">
			<istrue value="${native.os.isUnix}" />
		</condition>
		<condition property="native.cc.includes" value="-I${dir.src.native}${file.separator}common -I${dir.src.native}${file.separator}jni -I${java.include} -I${java.include}${file.separator}win32">
			<istrue value="${native.os.isWindows}" />
		</condition>

		<!-- Set the compiler arguments for compiling. -->
		<!-- TODO Test without  -fno-strict-aliasing -->
		<condition property="native.cc.args" value="-c -m${native.arch.model} ${native.cc.flags} -fPIC -fno-strict-aliasing -Wall -Wextra ${native.cc.flags.standard} -pthread ${native.cc.macros.debug} ${native.cc.macros.carbon_legacy} ${native.cc.macros.corefoundation} ${native.cc.macros.iokit} ${native.cc.includes}">
			<istrue value="${native.os.isApple}" />
		</condition>
		<condition property="native.cc.args" value="-c -m${native.arch.model} ${native.cc.flags} -fPIC -fno-strict-aliasing -Wall -Wextra ${native.cc.flags.standard} -pthread ${native.cc.macros.debug} ${native.cc.macros.xf86misc} ${native.cc.macros.xkb} ${native.cc.macros.xt} ${native.cc.macros.xrecord_async} ${native.cc.includes}">
			<istrue value="${native.os.isUnix}" />
		</condition>
		<condition property="native.cc.args" value="-c -m${native.arch.model} ${native.cc.flags} -fno-strict-aliasing -Wall -Wextra ${native.cc.macros.debug} ${native.cc.flags.standard} ${native.cc.includes}">
			<istrue value="${native.os.isWindows}" />
		</condition>
		<property name="native.cc.args2" value="-o" />


		<!-- Set system specific library name -->
		<condition property="native.executable" value="lib${project.name}.dylib">
			<istrue value="${native.os.isApple}" />
		</condition>
		<condition property="native.executable" value="lib${project.name}.so">
			<istrue value="${native.os.isUnix}" />
		</condition>
		<condition property="native.executable" value="${project.name}.dll">
			<istrue value="${native.os.isWindows}" />
		</condition>

		<!-- Set optimization level flag -->
		<condition property="native.ld.flags.optimize" value="-O1" else="-O0">
			<istrue value="${project.optimize}" />
		</condition>

		<!-- Set strip flag -->
		<condition property="native.ld.flags.strip" value=",-s" else="">
			<istrue value="${project.strip}" />
		</condition>

		<!-- Set system specific ldflags -->
		<condition property="native.ld.flags" value="${env.LDFLAGS}">
			<isset property="${env.LDFLAGS}" />
		</condition>
		<condition property="native.ld.flags" value="-arch ${native.arch.target} -Wl,-dead_strip,-dead_strip_dylibs,-install_name,${native.executable}.${build.major}.${build.minor},-compatibility_version,${build.major}.${build.minor},-current_version,${build.major}.${build.minor}.${build.revision}${native.ld.flags.strip}">
			<istrue value="${native.os.isApple}" />
		</condition>
		<condition property="native.ld.flags" value="-Wl,--as-needed,-soname=${native.executable}.${build.major}.${build.minor},${native.ld.flags.optimize}${native.ld.flags.strip}">
			<istrue value="${native.os.isUnix}" />
		</condition>
		<condition property="native.ld.flags" value="-Wl,--as-needed,--kill-at,${native.ld.flags.optimize}${native.ld.flags.strip}">
			<istrue value="${native.os.isWindows}" />
		</condition>

		<!-- Guess what system specific libraries to link against -->
		<condition property="native.ld.libs" value="-framework ApplicationServices -framework IOKit -framework Carbon">
			<istrue value="${native.os.isApple}" />
		</condition>
		<condition property="native.ld.libs" value="-lX11 -lXt -lXtst -lc">
			<istrue value="${native.os.isUnix}" />
		</condition>
		<condition property="native.ld.libs" value="-lmsvcrt -luser32 -lkernel32">
			<istrue value="${native.os.isWindows}" />
		</condition>

		<!-- Set system specific linker arguments -->
		<condition property="native.ld.args" value="-dynamiclib -m${native.arch.model} ${native.ld.flags}">
			<istrue value="${native.os.isApple}" />
		</condition>
		<condition property="native.ld.args" value="-shared -m${native.arch.model} ${native.ld.flags}">
			<istrue value="${native.os.isUnix}" />
		</condition>
		<condition property="native.ld.args" value="-shared -m${native.arch.model} ${native.ld.flags}">
			<istrue value="${native.os.isWindows}" />
		</condition>
		<property name="native.ld.args2" value="${native.ld.libs} -o" />



		<!-- Create property file for the descovered values -->
		<propertyfile file="build.properties" comment="auto-generated by ant configure">
			<entry key="java.cc"				value="${java.cc}" />
			<entry key="java.target"			value="${java.target}" />
			<entry key="native.cc"				value="${native.cc}" />
			<entry key="native.cc.args"			value="${native.cc.args}" />
			<entry key="native.cc.args2"		value="${native.cc.args2}" />
			<entry key="native.ld"				value="${native.ld}" />
			<entry key="native.ld.args"			value="${native.ld.args}" />
			<entry key="native.ld.args2"		value="${native.ld.args2}" />
		</propertyfile>


		<!-- Set a flag to let our tasks know we have configured successfully -->
		<property name="project.isConfigured" value="true" />
	</target>


	<target name="compile" depends="configure,compile-java,compile-native" description="Compiles both Java and C source files.">
	</target>


	<target name="compile-java" depends="configure" description="Compiles Java source files.">
		<echo>Compiling java source...</echo>
		<mkdir dir="${dir.bin.class}" />

		<javac srcdir="${dir.src.java}"
			destdir="${dir.bin.class}"
			classpath="${dir.bin.class}"
			bootclasspath="${java.bootclasspath}"
			debug="${project.debug}"
			debuglevel="lines,vars,source"
			optimize="${project.optimize}"
			deprecation="false"
			includeantruntime="false"
			listfiles="true"
			compiler="${java.cc}"
			source="${java.target}"
			target="${java.target}"
			verbose="false"
		/>
	</target>

	<target name="compile-native" depends="configure" description="Compiles C source files.">
		<echo>Creating JNI Headers...</echo>
		<javah
			class="org.jnativehook.GlobalScreen"
			outputFile="${dir.src.native}/jni/org_jnativehook_GlobalScreen.h"
			classpath="${dir.bin.class}"
			verbose="true"
		/>


		<echo>Compiling C source...</echo>
		<!-- Create required directories for compiling -->
		<mkdir dir="${dir.bin.obj}" />
		<mkdir dir="${dir.bin.obj}/common" />
		<mkdir dir="${dir.bin.obj}/jni" />
		<mkdir dir="${dir.bin.obj}/${dir.src.platform}" />

		<fileset dir="${dir.src.native}" id="file.src">
			<include name="common/*.c" />
			<include name="jni/*.c" />
			<include name="${dir.src.platform}/*.c" />
		</fileset>

		<property name="file.src.txt" refid='file.src'/>
		<echo>Applying ${native.cc} on the following files: ${file.src.txt}</echo>

		<!-- Execute the native compiler on the soruce files -->
		<parallel threadsPerProcessor="1" failonany="true">
			<apply executable="${native.cc}" failonerror="true" verbose="true" ignoremissing="false">
				<fileset refid="file.src" />

				<arg line="${native.cc.args}" />
				<srcfile />
				<arg value="${native.cc.args2}" />
				<targetfile />

				<mapper type="glob" from="*.c" to="${dir.bin.obj}/*.o" />
			</apply>
		</parallel>

		<echo>Linking C objects...</echo>
		<!-- Create required directory for linking -->
		<mkdir dir="${dir.lib}/${native.os}/${native.arch}" />

		<fileset dir="${dir.bin.obj}" id="file.obj">
			<include name="**/*.o" />
		</fileset>

		<property name="file.obj.txt" refid="file.obj" />
		<echo>Applying ${native.ld} on the following files: ${file.obj.txt}</echo>

		<!-- Execute the native linker on the object files -->
		<apply executable="${native.ld}" failonerror="true" verbose="true" ignoremissing="false" parallel="true">
			<fileset refid="file.obj" />

			<arg line="${native.ld.args}" />
			<srcfile />
			<arg line="${native.ld.args2}" />
			<arg file="${dir.lib}/${native.os}/${native.arch}/${native.executable}" />
		</apply>
	</target>


	<target name="jar" description="Creates the jar library.">
		<echo>Copying libs...</echo>
		<mkdir dir="${dir.jar}" />
		<mkdir dir="${dir.bin.class}/org/jnativehook/lib" />
		<copy overwrite="true" todir="${dir.bin.class}/org/jnativehook/lib">
			<fileset dir="${dir.lib}" includes="**/*" />
		</copy>

		<echo>Creating ${project.name}.jar...</echo>
		<mkdir dir="${dir.jar}" />
		<jar jarfile="${dir.jar}/${project.name}.jar" basedir="${dir.bin.class}">
			<include name="org/jnativehook/**" />
			<!-- <exclude name="org/jnativehook/example/NativeHookDemo.class" /> -->
			<manifest>
				<attribute name="Main-Class" value="org.jnativehook.example.NativeHookDemo" />
				<section name="org/jnativehook">
					<attribute name="Implementation-Title" value="${project.name} Library" />
					<attribute name="Implementation-Version" value="${project.version}" />
					<attribute name="Implementation-Vendor" value="${project.vendor}" />
				</section>
			</manifest>
		</jar>
	</target>


	<target name="run" depends="configure" description="Execute the bundled example.">
		<java classname="org.jnativehook.example.NativeHookDemo" fork="true" failonerror="true">
			<jvmarg value="-Xmx20M" />
			<jvmarg value="-Djava.library.path=${dir.lib}/${native.os}/${native.arch}" />
			<classpath>
				<pathelement location="${dir.jar}/${project.name}.jar" />
				<pathelement path="${dir.bin.class}" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</java>
	</target>


	<target name="javadoc" description="Generates javadoc api documentation.">
		<echo level="info">Generating API Documenation...</echo>
		<mkdir dir="${dir.doc}" />

		<javadoc destdir="${dir.doc}" windowtitle="${project.name}" author="true" version="true" use="true">
			<packageset dir="${dir.src.java}" defaultexcludes="yes">
				<include name="org/jnativehook/**" />
				<exclude name="org/jnativehook/example/**" />
			</packageset>

			<doctitle><![CDATA[<h1>${project.name} API Documentation</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; 2006-2013 ${project.vendor}. All Rights Received.</i>]]></bottom>

			<!--
			<tag name="to.do" scope="all" description="To Do:" />
			<tag name="fix.me" scope="all" description="Fix Needed:" />
			-->

			<link href="http://download.oracle.com/javase/1.5.0/docs/api/" />
		</javadoc>
	</target>


	<target name="package" depends="jar,javadoc" description="Creates zip files for distribution.">
		<!-- Copy Files To Dist Locations -->
		<echo>Creating Distribution Archive...</echo>
		<mkdir dir="${dir.dist}" />

		<zip destfile="${dir.dist}/${project.name}-${project.version}.zip" duplicate="add" level="9">
			<zipfileset dir="${dir.jar}" prefix="${project.name}/jar">
				<include name="*.jar" />
			</zipfileset>

			<zipfileset dir="${basedir}" prefix="${project.name}">
				<include name="license*.txt" />
				<include name="readme.txt" />
			</zipfileset>
		</zip>

		<zip destfile="${dir.dist}/${project.name}-doc-${project.version}.zip" duplicate="add" level="9">
			<zipfileset dir="${dir.doc}" prefix="${project.name}/doc">
				<exclude name="**/.*" />
			</zipfileset>
		</zip>

		<zip destfile="${dir.dist}/${project.name}-src-${project.version}.zip" duplicate="add" level="9">
			<zipfileset dir="${basedir}" prefix="${project.name}">
				<exclude name="**/.*" />

				<include name="*.txt" />
				<include name="build.*" />
				<exclude name="build.properties*" />
			</zipfileset>

			<zipfileset dir="${dir.src}" prefix="${project.name}/src">
				<exclude name="**/.*" />

				<exclude name="native/jni/org_jnativehook_GlobalScreen.h" />
			</zipfileset>
		</zip>

		<!-- Increment and write out the build numbers
		<propertyfile file="build.num" comment="Build Number for ANT. Do not edit!">
			<entry key="build.major" type="int" value="${build.major}" />
			<entry key="build.minor" type="int" value="${build.minor}" />
			<entry key="build.revision" type="int" value="1" operation="+" />
		</propertyfile>
		 -->
	</target>


	<target name="all" depends="compile,jar" description="Compile all source files and create the jar library.">
	</target>
</project>
